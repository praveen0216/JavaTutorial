package com.test.java.java8;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.stream.Collectors;

public class GroupBy {
    public static void main(String args[]) {
        List<Employee> emp = new ArrayList<>();
        emp.add(new Employee("Dipak", "Delhi", 21));
        emp.add(new Employee("Sumit", "Delhi", 21));
        emp.add(new Employee("Karan", "Delhi", 23));
        emp.add(new Employee("Mona", "Udaipur", 23));
        emp.add(new Employee("Rajesh", "Banglore", 23));
        emp.add(new Employee("Niraj", "Banglore", 31));
        Map<String,List<Employee>> empByCity = new HashMap<>();
        //group by city
        empByCity =  emp.stream().collect(Collectors.groupingBy(Employee::getCity));
        //group by city and print max age of employee of that city
        emp.stream().collect(Collectors.groupingBy(Employee::getCity)).forEach(
                (s, employees) -> System.out.println(employees.stream().sorted(Comparator.comparing(
                        Employee::getAge).reversed()).collect(Collectors.toList()).get(0).getName()));

        //emp.stream().collect(Collectors.groupingBy(Employee::getCity, HashMap::new ,Collectors.maxBy(Employee::getAge)))
    }

    }

class Employee {
    private String name;
    private String city;
    private int age;

    public Employee(String name, String city, int age) {
        this.name = name;
        this.city = city;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return String.format("%s(%s,%d)", name, city, age);
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 79 * hash + Objects.hashCode(this.name);
        hash = 79 * hash + Objects.hashCode(this.city);
        hash = 79 * hash + this.age;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Employee other = (Employee) obj;
        if (!Objects.equals(this.name, other.name)) {
            return false;
        }
        if (!Objects.equals(this.city, other.city)) {
            return false;
        }
        if (this.age != other.age) {
            return false;
        }
        return true;
    }
}
